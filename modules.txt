Module(
 body=[
  Import(
   names=[
    alias(name='random')]),
  Assign(
   targets=[
    Name(id='n', ctx=Store())],
   value=Call(
    func=Name(id='int', ctx=Load()),
    args=[
     Call(
      func=Name(id='input', ctx=Load()),
      args=[],
      keywords=[])],
    keywords=[])),
  Assign(
   targets=[
    Name(id='m', ctx=Store())],
   value=Constant(value=3)),
  Assign(
   targets=[
    Name(id='num_list', ctx=Store())],
   value=List(
    elts=[
     Constant(value=2)],
    ctx=Load())),
  Assign(
   targets=[
    Name(id='c', ctx=Store())],
   value=BinOp(
    left=BinOp(
     left=Name(id='n', ctx=Load()),
     op=Add(),
     right=Name(id='m', ctx=Load())),
    op=Mult(),
    right=Constant(value=3))),
  For(
   target=Name(id='i', ctx=Store()),
   iter=Call(
    func=Name(id='range', ctx=Load()),
    args=[
     Constant(value=0),
     Name(id='n', ctx=Load())],
    keywords=[]),
   body=[
    Expr(
     value=Call(
      func=Attribute(
       value=Name(id='num_list', ctx=Load()),
       attr='append',
       ctx=Load()),
      args=[
       Call(
        func=Name(id='int', ctx=Load()),
        args=[
         Call(
          func=Name(id='input', ctx=Load()),
          args=[],
          keywords=[])],
        keywords=[])],
      keywords=[]))],
   orelse=[]),
  Expr(
   value=Call(
    func=Name(id='print', ctx=Load()),
    args=[
     Constant(value='List of numbers:'),
     Name(id='num_list', ctx=Load())],
    keywords=[])),
  Expr(
   value=Call(
    func=Name(id='print', ctx=Load()),
    args=[
     Constant(value='Squares of each number in the list:')],
    keywords=[])),
  For(
   target=Name(id='num', ctx=Store()),
   iter=Name(id='num_list', ctx=Load()),
   body=[
    Expr(
     value=Call(
      func=Name(id='print', ctx=Load()),
      args=[
       BinOp(
        left=Name(id='num', ctx=Load()),
        op=Pow(),
        right=Constant(value=2))],
      keywords=[]))],
   orelse=[]),
  Assign(
   targets=[
    Name(id='largest_num', ctx=Store())],
   value=Subscript(
    value=Name(id='num_list', ctx=Load()),
    slice=Constant(value=0),
    ctx=Load())),
  Assign(
   targets=[
    Name(id='i', ctx=Store())],
   value=Constant(value=1)),
  While(
   test=Compare(
    left=Name(id='i', ctx=Load()),
    ops=[
     Lt()],
    comparators=[
     Call(
      func=Name(id='len', ctx=Load()),
      args=[
       Name(id='num_list', ctx=Load())],
      keywords=[])]),
   body=[
    If(
     test=Compare(
      left=Subscript(
       value=Name(id='num_list', ctx=Load()),
       slice=Name(id='i', ctx=Load()),
       ctx=Load()),
      ops=[
       Gt()],
      comparators=[
       Name(id='largest_num', ctx=Load())]),
     body=[
      Assign(
       targets=[
        Name(id='largest_num', ctx=Store())],
       value=Subscript(
        value=Name(id='num_list', ctx=Load()),
        slice=Name(id='i', ctx=Load()),
        ctx=Load()))],
     orelse=[]),
    AugAssign(
     target=Name(id='i', ctx=Store()),
     op=Add(),
     value=Constant(value=1))],
   orelse=[]),
  Expr(
   value=Call(
    func=Name(id='print', ctx=Load()),
    args=[
     Constant(value='Largest number in the list:'),
     Name(id='largest_num', ctx=Load())],
    keywords=[])),
  Assign(
   targets=[
    Name(id='total_sum', ctx=Store())],
   value=Constant(value=0)),
  Assign(
   targets=[
    Name(id='count', ctx=Store())],
   value=Constant(value=0)),
  While(
   test=Compare(
    left=Name(id='count', ctx=Load()),
    ops=[
     Lt()],
    comparators=[
     Name(id='m', ctx=Load())]),
   body=[
    For(
     target=Name(id='num', ctx=Store()),
     iter=Name(id='num_list', ctx=Load()),
     body=[
      AugAssign(
       target=Name(id='total_sum', ctx=Store()),
       op=Add(),
       value=Name(id='num', ctx=Load())),
      AugAssign(
       target=Name(id='count', ctx=Store()),
       op=Add(),
       value=Constant(value=1))],
     orelse=[])],
   orelse=[]),
  Assign(
   targets=[
    Name(id='average', ctx=Store())],
   value=BinOp(
    left=Name(id='total_sum', ctx=Load()),
    op=Div(),
    right=Name(id='count', ctx=Load()))),
  Expr(
   value=Call(
    func=Name(id='print', ctx=Load()),
    args=[
     Constant(value='Average of numbers in the list:'),
     Name(id='average', ctx=Load())],
    keywords=[])),
  Expr(
   value=Call(
    func=Name(id='print', ctx=Load()),
    args=[
     Constant(value='Multiplication table:')],
    keywords=[])),
  For(
   target=Name(id='i', ctx=Store()),
   iter=Name(id='num_list', ctx=Load()),
   body=[
    For(
     target=Name(id='j', ctx=Store()),
     iter=Call(
      func=Name(id='range', ctx=Load()),
      args=[
       Constant(value=1),
       Constant(value=11)],
      keywords=[]),
     body=[
      Expr(
       value=Call(
        func=Name(id='print', ctx=Load()),
        args=[
         Name(id='i', ctx=Load()),
         Constant(value='x'),
         Name(id='j', ctx=Load()),
         Constant(value='='),
         BinOp(
          left=Name(id='i', ctx=Load()),
          op=Mult(),
          right=Name(id='j', ctx=Load()))],
        keywords=[]))],
     orelse=[])],
   orelse=[]),
  Assign(
   targets=[
    Name(id='random_list', ctx=Store())],
   value=List(elts=[], ctx=Load())),
  For(
   target=Name(id='i', ctx=Store()),
   iter=Call(
    func=Name(id='range', ctx=Load()),
    args=[
     Constant(value=10)],
    keywords=[]),
   body=[
    Expr(
     value=Call(
      func=Attribute(
       value=Name(id='random_list', ctx=Load()),
       attr='append',
       ctx=Load()),
      args=[
       Call(
        func=Attribute(
         value=Name(id='random', ctx=Load()),
         attr='randint',
         ctx=Load()),
        args=[
         Constant(value=1),
         Constant(value=100)],
        keywords=[])],
      keywords=[]))],
   orelse=[]),
  Expr(
   value=Call(
    func=Name(id='print', ctx=Load()),
    args=[
     Constant(value='Random list of numbers:'),
     Name(id='random_list', ctx=Load())],
    keywords=[])),
  Assign(
   targets=[
    Name(id='squares_list', ctx=Store())],
   value=List(elts=[], ctx=Load())),
  Assign(
   targets=[
    Name(id='i', ctx=Store())],
   value=Constant(value=0)),
  While(
   test=Compare(
    left=Name(id='i', ctx=Load()),
    ops=[
     Lt()],
    comparators=[
     Call(
      func=Name(id='len', ctx=Load()),
      args=[
       Name(id='num_list', ctx=Load())],
      keywords=[])]),
   body=[
    Expr(
     value=Call(
      func=Attribute(
       value=Name(id='squares_list', ctx=Load()),
       attr='append',
       ctx=Load()),
      args=[
       BinOp(
        left=Subscript(
         value=Name(id='num_list', ctx=Load()),
         slice=Name(id='i', ctx=Load()),
         ctx=Load()),
        op=Pow(),
        right=Constant(value=2))],
      keywords=[])),
    AugAssign(
     target=Name(id='i', ctx=Store()),
     op=Add(),
     value=Constant(value=1))],
   orelse=[]),
  Expr(
   value=Call(
    func=Name(id='print', ctx=Load()),
    args=[
     Constant(value='Squares of each number in the list (using list comprehension):'),
     Name(id='squares_list', ctx=Load())],
    keywords=[]))],
 type_ignores=[])